// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Comparator Property Change Cases > flags enum with missing value 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -6,6 +6,8 @@

export enum EStatusFlags {
  CONNECTED = 1 << 0,
  DISCONNECTED = 1 << 1,
  PENDING = 1 << 2,
+  /** @generated bitfield value */
+  Flag_12 = 12
}"
`;

exports[`Comparator Property Change Cases > generic type parameter changes 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,25 +1,37 @@
import { ObservableMap } from 'mobx';

export interface DataStore {
-  cache: Set<string>;
+  cache: Set<number>;
+
  items: Map<string, Item>;
-  reactive: ObservableMap<string, ReactiveData>;
+
+  reactive: ObservableMap<number, ReactiveData>;
+
  users: ObservableSet<UserData>;
}

export interface Item {
+  data: string;
+
  id: string;
+
  name: string;
+
+  type: 'text' | 'image' | 'file';
}

export interface UserData {
+  avatarUrl: string;
+
  id: number;
+
  name: string;
-  email: string;
}

export interface ReactiveData {
  id: number;
+
  name: string;
+
  tracking: boolean;
}"
`;

exports[`Comparator Property Change Cases > generic type parameter changes with union types 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,29 +1,51 @@
import { ObservableMap } from 'mobx';

export interface DataCollection {
-  cache: ObservableMap<string, BasicItem | ExtendedItem>;
+  cache: ObservableMap<string, BasicItem | ExtendedItem | SpecialItem>;
+
  items: Set<ReactiveData | ExtendedItem>;
+
  mappings: Map<string, UserData | ReactiveData>;
}

export interface BasicItem {
+  createdAt: Date;
+
  id: string;
+
  name: string;
}

export interface ExtendedItem {
  description: string;
+
  id: string;
+
+  isActive: boolean;
+
  metadata: Record<string, unknown>;
+
  name: string;
}

export interface UserData {
+  avatarUrl: string;
+
  id: number;
+
  name: string;
}

export interface ReactiveData {
  id: number;
+
+  name: string;
+
  tracking: boolean;
}
+
+export interface SpecialItem {
+  id: string;
+  type: 'special';
+  priority: number;
+}"
`;

exports[`Comparator Property Change Cases > interface with added nested interfaces 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,7 +1,25 @@
export interface AppConfiguration {
+  features: FeatureFlags;
+
+  settings: AppSettings;
+
  version: string;
-  settings: {
-    theme: string;
-    language: string;
-  };
}
+
+export interface NotificationSettings {
+  enabled: boolean;
+  sound: boolean;
+  desktop: boolean;
+}
+
+export interface AppSettings {
+  theme: string;
+  language: string;
+  notifications: NotificationSettings;
+}
+
+export interface FeatureFlags {
+  darkMode: boolean;
+  betaFeatures: boolean;
+  experimentalApi: boolean;
+}"
`;

exports[`Comparator Property Change Cases > interface with implied enum property 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,4 +1,16 @@
export interface SteamStatus {
-  m_eResult: number;
  m_bRequireRestart: boolean;
+
+  /**
+   * This value is an enum
+   * @currentValue 0
+   */
+  m_eAppUpdateBytes: number;
+
+  m_eResult: EResult;
}
+
+/** @generated */
+export enum EResult {
+  EResult1 = 1
+}"
`;

exports[`Comparator Property Change Cases > interface with modified nested interfaces 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,12 +1,26 @@
export interface NetworkConfig {
  baseUrl: string;
+
  connection: ConnectionParams;
+
+  endpoints: Record<string, string>;
}

export interface ConnectionParams {
+  keepAlive: boolean;
+
+  proxy?: ProxySettings;
+
+  retries: number;
+
  /**
   * Timeout in milliseconds
   */
  timeout: number;
-  retries: number;
}
+
+export interface ProxySettings {
+  host: string;
+  port: number;
+  auth?: string;
+}"
`;

exports[`Comparator Property Change Cases > interface with property changing from one interface to another 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,11 +1,26 @@
export interface ChatMessage {
-  content: TextContent;
+  content: MessageContent;
+
  id: string;
+
+  read: boolean;
+
  sender: string;
+
  timestamp: number;
}

export interface TextContent {
  text: string;
  contentFormat: 'plain' | 'markdown';
}
+
+export interface TextData {
+  text: string;
+  format: 'plain' | 'markdown' | 'html';
+}
+
+export interface MessageContent {
+  type: 'text' | 'image' | 'file';
+  data: TextData;
+}"
`;

exports[`Comparator Property Change Cases > interface with property changing from required to optional 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,6 +1,13 @@
export interface ProductDetails {
-  description: string;
+  description?: string;
+
+  discount?: number;
+
  id: string;
+
+  inStock: boolean;
+
  name: string;
+
  price: number;
}"
`;

exports[`Comparator Property Change Cases > property changes from array to specific interface 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,9 +1,28 @@
export interface LibraryContent {
-  books: Book[];
-  magazines: any[];
+  books: BookCollection;
+
+  magazines: MagazineCollection;
}

export interface Book {
  title: string;
  author: string;
}
+
+export interface BookCollection {
+  items: Book[];
+  count: number;
+  lastUpdated: Date;
+}
+
+export interface Magazine {
+  title: string;
+  issue: number;
+  publisher: string;
+}
+
+export interface MagazineCollection {
+  items: Magazine[];
+  count: number;
+  lastUpdated: Date;
+}"
`;

exports[`Comparator Property Change Cases > property type changes from interface to primitive 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,8 +1,9 @@
export interface GameState {
-  player: PlayerStats;
  gameMode: string;
+
+  player: string;
}

export interface PlayerStats {
  score: number;
  level: number;"
`;

exports[`Comparator Property Change Cases > property type changes from primitive to interface 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,4 +1,11 @@
export interface UserSettings {
-  profile: string;
  preferences: Record<string, boolean>;
+
+  profile: UserProfile;
}
+
+export interface UserProfile {
+  displayName: string;
+  avatar: string;
+  bio: string;
+}"
`;

exports[`Comparator Property Change Cases > property with enum value changes 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,10 +1,14 @@
export interface StatusConfig {
-  status: ConnectionStatus;
+  errorCode?: number;
+
  message: string;
+
+  status: ConnectionStatus;
}

export enum ConnectionStatus {
  CONNECTED = 1,
  DISCONNECTED = 2,
  PENDING = 3,
+  "TODO: change me 5" = 5
}"
`;

exports[`Comparator Property Change Cases > property with shorter enum value changes 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,10 +1,14 @@
export interface StatusConfig {
+  errorCode?: number;
+
  eStatus: ConnectionStatus;
+
  message: string;
}

export enum ConnectionStatus {
  CONNECTED = 1,
  DISCONNECTED = 2,
  PENDING = 3,
+  "TODO: change me 5" = 5
}"
`;

exports[`Comparator Property Change Cases > shorted implied enum property 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,3 +1,14 @@
export interface SteamStatus {
-  eResult: number;
+  /**
+   * This value is an enum
+   * @currentValue 0
+   */
+  eAppUpdateBytes: number;
+
+  eResult: EResult;
}
+
+/** @generated */
+export enum EResult {
+  EResult1 = 1
+}"
`;
