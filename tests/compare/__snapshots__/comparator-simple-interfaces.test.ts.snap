// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Comparator Simple Interface Cases > deeply nested interfaces 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,11 +1,17 @@
export interface GrandParent {
+  generation: number;
+
  parent: Parent;
}

export interface Parent {
  child: Child;
+
+  id: number;
}

export interface Child {
+  age: number;
+
  name: string;
}"
`;

exports[`Comparator Simple Interface Cases > implied enum property 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,3 +1,8 @@
export interface StatusHolder {
-  m_eStatus: number;
+  m_eStatus: EStatus;
}
+
+/** @generated */
+export enum EStatus {
+  EStatus7 = 7
+}"
`;

exports[`Comparator Simple Interface Cases > implied enum property with multiple currentValues 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,3 +1,9 @@
export interface StatusHolder {
-  m_eStatus: number;
+  m_eStatus: EStatus;
}
+
+/** @generated */
+export enum EStatus {
+  EStatus7 = 7,
+  EStatus8 = 8
+}"
`;

exports[`Comparator Simple Interface Cases > interface with complex property types 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,4 +1,9 @@
export interface ComplexData {
-  simpleArray: string[];
+  complexMap: Map<string, Set<number>>;
+
+  nestedArray: Array<Array<string>>;
+
  record: Record<string, number>;
+
+  simpleArray: string[];
}"
`;

exports[`Comparator Simple Interface Cases > interface with method signatures 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,4 +1,7 @@
export interface Service {
+  clearData(): void;
+
  getData(): string;
+
  setData(value: string): void;
}"
`;

exports[`Comparator Simple Interface Cases > interface with missing enum property 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -4,6 +4,7 @@

export enum GameType {
  Pending,
  Active,
  Inactive,
+  "TODO: change me 3" = 3
}"
`;

exports[`Comparator Simple Interface Cases > interface with optional properties 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,4 +1,7 @@
export interface Config {
-  name: string;
+  debug?: boolean;
+
+  name?: string;
+
  version?: string;
}"
`;

exports[`Comparator Simple Interface Cases > interface with readonly properties 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,4 +1,7 @@
export interface ImmutableData {
+  readonly data: string;
+
  readonly id: number;
-  data: string;
+
+  updatedAt: Date;
}"
`;

exports[`Comparator Simple Interface Cases > interface with tuple type 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,3 +1,5 @@
export interface TupleContainer {
-  coordinates: [number, number];
+  coordinates: [number, boolean, number];
+
+  labels: [string, string];
}"
`;

exports[`Comparator Simple Interface Cases > map type different 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,3 +1,3 @@
export interface Container {
-  data: Map<string, number>;
+  data: Map<string, boolean>;
}"
`;

exports[`Comparator Simple Interface Cases > nested interfaces 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,7 +1,11 @@
export interface Parent {
  child: Child;
+
+  id: number;
}

export interface Child {
+  age: number;
+
  name: string;
}"
`;

exports[`Comparator Simple Interface Cases > new enum property 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,3 +1,9 @@
export interface StatusHolder {
  foo: string;
+
+  /**
+   * this value is an enum
+   * @currentValue 7
+   */
+  status: number;
}"
`;

exports[`Comparator Simple Interface Cases > observable map 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,5 +1,5 @@
import { ObservableMap } from 'mobx';

export interface Container {
-  data: ObservableMap<string, number>;
+  data: ObservableMap<string, boolean>;
}"
`;

exports[`Comparator Simple Interface Cases > observable set 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,5 +1,5 @@
import { ObservableSet } from 'mobx';

export interface Container {
-  data: ObservableSet<number>;
+  data: ObservableSet<boolean>;
}"
`;

exports[`Comparator Simple Interface Cases > set type different 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,3 +1,3 @@
export interface Container {
-  data: Set<number>;
+  data: Set<boolean>;
}"
`;
