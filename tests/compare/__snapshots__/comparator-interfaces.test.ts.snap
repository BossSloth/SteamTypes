// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Comparator Interface Cases > deeply nested interfaces 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,11 +1,14 @@
 export interface GrandParent {
   parent: Parent;
+  generation: number;
 }
 
 export interface Parent {
   child: Child;
+  id: number;
 }
 
 export interface Child {
   name: string;
+  age: number;
 }
"
`;

exports[`Comparator Interface Cases > interface with circular reference 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,3 +1,4 @@
 export interface Node {
   value: string;
+  next: Node | null;
 }
"
`;

exports[`Comparator Interface Cases > interface with complex property types 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,4 +1,6 @@
 export interface ComplexData {
   simpleArray: string[];
   record: Record<string, number>;
+  nestedArray: Array<Array<string>>;
+  complexMap: Map<string, Set<number>>;
 }
"
`;

exports[`Comparator Interface Cases > interface with intersection types 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,7 +1,12 @@
 export interface Combined {
-  data: A;
+  data: (A | B)[];
 }
 
 export interface A {
   propA: string;
 }
+
+export interface B {
+  propB: number;
+  extraB: Date;
+}
"
`;

exports[`Comparator Interface Cases > interface with method signatures 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,4 +1,5 @@
 export interface Service {
   getData(): string;
   setData(value: string): void;
+  clearData(): void;
 }
"
`;

exports[`Comparator Interface Cases > interface with missing enum property 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -4,6 +4,7 @@
 
 export enum Status {
   Pending,
   Active,
   Inactive,
+  "TODO: change me" = 3
 }
"
`;

exports[`Comparator Interface Cases > interface with optional properties 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,4 +1,5 @@
 export interface Config {
-  name: string;
+  name?: string;
   version?: string;
+  debug?: boolean;
 }
"
`;

exports[`Comparator Interface Cases > interface with readonly properties 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,4 +1,5 @@
 export interface ImmutableData {
   readonly id: number;
-  data: string;
+  readonly data: string;
+  updatedAt: Date;
 }
"
`;

exports[`Comparator Interface Cases > interface with tuple type 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,3 +1,4 @@
 export interface TupleContainer {
-  coordinates: [number, number];
+  coordinates: [number, boolean, number];
+  labels: [string, string];
 }
"
`;

exports[`Comparator Interface Cases > map type different 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,3 +1,3 @@
 export interface Container {
-  data: Map<string, number>;
+  data: Map<string, boolean>;
 }
"
`;

exports[`Comparator Interface Cases > nested interfaces 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,7 +1,9 @@
 export interface Parent {
   child: Child;
+  id: number;
 }
 
 export interface Child {
   name: string;
+  age: number;
 }
"
`;

exports[`Comparator Interface Cases > observable map 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,5 +1,5 @@
 import { ObservableMap } from 'mobx';
 
 export interface Container {
-  data: ObservableMap<string, number>;
+  data: ObservableMap<string, boolean>;
 }
"
`;

exports[`Comparator Interface Cases > observable set 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,5 +1,5 @@
 import { ObservableSet } from 'mobx';
 
 export interface Container {
-  data: ObservableSet<number>;
+  data: ObservableSet<boolean>;
 }
"
`;

exports[`Comparator Interface Cases > set type different 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,3 +1,3 @@
 export interface Container {
-  data: Set<number>;
+  data: Set<boolean>;
 }
"
`;
