// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Comparator Interface Cases > interface with array intersection types 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,7 +1,13 @@
export interface Combined {
-  data: A;
+  data: (A | B)[];
}

export interface A {
  propA: string;
+  extraA: boolean;
}
+
+export interface B {
+  propB: number;
+  extraB: Date;
+}"
`;

exports[`Comparator Interface Cases > interface with complex nested generics 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,11 +1,19 @@
export interface ApiResponse<T> {
-  data: T[];
+  data: number | string[];
  pagination: Pagination;
  success: boolean;
+  error: ApiError;
}

export interface Pagination {
  page: number;
  limit: number;
  total: number;
+  hasMore: boolean;
}
+
+export interface ApiError {
+  code: string;
+  message: string;
+  details?: Record<string, unknown>;
+}"
`;

exports[`Comparator Interface Cases > interface with different ObservableMap type in an intersection 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,5 +1,5 @@
import { ObservableMap } from 'mobx';

export interface Container {
-  data: number | ObservableMap<string, number>;
+  data: number | ObservableMap<string, boolean>;
}"
`;

exports[`Comparator Interface Cases > inverse union type with interface 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,8 +1,3 @@
export interface Container {
-  data: DataType | null;
+  data: string | null;
}
-
-export interface DataType {
-  value: string;
-  id: number;
-}"
`;

exports[`Comparator Interface Cases > nested interface in union type 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -3,10 +3,12 @@
}

export interface Base {
  id: number;
  name: string;
+  created: Date;
}

export interface Extended {
  details: string;
+  active: boolean;
}"
`;

exports[`Comparator Interface Cases > union type with different lengths 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,3 +1,3 @@
export interface Container {
-  data: string | number;
+  data: string | number | boolean;
}"
`;

exports[`Comparator Interface Cases > union type with interface 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,3 +1,8 @@
export interface Container {
-  data: string | null;
+  data: DataType | null;
}
+
+export interface DataType {
+  value: string;
+  id: number;
+}"
`;

exports[`Comparator Interface Cases > union type with interface and different lengths 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,11 +1,16 @@
export interface Container {
-  data: A | B;
+  data: A | B | C;
}

export interface A {
  propA: string;
}

export interface B {
  propB: number;
+  extraB: Date;
}
+
+export interface C {
+  propC: boolean;
+}"
`;
