// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Comparator Interface Cases > 2 level recursive interface missing interface 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,4 +1,15 @@
export interface TreeNode {
-  value: id;
+  children: Node[];
+
  foo: string;
+
+  value: string;
}
+
+export interface Node {
+  children: Node[];
+
+  parent: TreeNode;
+
+  value: string;
+}"
`;

exports[`Comparator Interface Cases > array intersection types 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,7 +1,15 @@
export interface Combined {
-  data: A;
+  data: (A | B)[];
}

export interface A {
+  extraA: boolean;
+
  propA: string;
}
+
+export interface B {
+  extraB: Date;
+
+  propB: number;
+}"
`;

exports[`Comparator Interface Cases > external template literal types with missing type 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,8 +1,10 @@
-export type HttpMethod = 'GET' | 'POST';
+export type HttpMethod = number;
export type ResourceType = 4 | 5;

export interface RouteConfig {
  method: HttpMethod;
+
  path: string;
+
  type: ResourceType;
}"
`;

exports[`Comparator Interface Cases > indexed access interface type with mismatch 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,7 +1,7 @@
export interface UserProfile {
-  theme: User['info'];
+  theme: Settings;

  user: User;
}

export interface User {"
`;

exports[`Comparator Interface Cases > indexed access type mismatch 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,15 +1,15 @@
export interface UserProfile {
-  preferences: User['email'];
+  preferences: string;

-  theme: User['settings']['notifications'];
+  theme: boolean;

  user: User;
}

export interface User {
-  email: number;
+  email: string;

  id: number;

  name: string;

@@ -17,9 +17,9 @@
}

export interface Settings {
  language: string;

-  notifications: string;
+  notifications: boolean;

  theme: string;
}"
`;

exports[`Comparator Interface Cases > interface with complex nested generics 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,11 +1,27 @@
export interface ApiResponse<T> {
-  data: T[];
+  data: number | string[];
+
+  error: ApiError;
+
  pagination: Pagination;
+
  success: boolean;
}

export interface Pagination {
-  page: number;
+  hasMore: boolean;
+
  limit: number;
+
+  page: number;
+
  total: number;
}
+
+export interface ApiError {
+  code: string;
+
+  details?: Record<string, unknown>;
+
+  message: string;
+}"
`;

exports[`Comparator Interface Cases > interface with complex nested structures 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,13 +1,53 @@
export interface AppConfig {
  api: ApiConfig;
+
+  features: Record<string, boolean>;
+
  ui: UiConfig;
}

export interface ApiConfig {
  baseUrl: string;
+
+  endpoints: Record<string, EndpointConfig>;
+
+  headers: Record<string, string>;
+
  timeout: number;
}

export interface UiConfig {
+  animations: boolean;
+
+  components: ComponentsConfig;
+
+  layout: 'vertical' | 'horizontal';
+
  theme: string;
}
+
+export interface EndpointConfig {
+  method: string;
+
+  path: string;
+
+  requiresAuth: boolean;
+}
+
+export interface ComponentsConfig {
+  button: ButtonConfig;
+
+  input: InputConfig;
+}
+
+export interface ButtonConfig {
+  borderRadius: number;
+
+  fontSize: number;
+}
+
+export interface InputConfig {
+  borderRadius: number;
+
+  padding: number;
+}"
`;

exports[`Comparator Interface Cases > interface with different ObservableMap type in an intersection 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,5 +1,5 @@
import { ObservableMap } from 'mobx';

export interface Container {
-  data: number | ObservableMap<string, number>;
+  data: number | ObservableMap<string, boolean>;
}"
`;

exports[`Comparator Interface Cases > interface with indexed access types 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,16 +1,25 @@
export interface UserProfile {
  preferences: User['settings'];
+
+  theme: string;
+
  user: User;
}

export interface User {
+  email: string;
+
  id: number;
+
  name: string;
+
  settings: Settings;
}

export interface Settings {
+  language: string;
+
  notifications: boolean;

  theme: string;
}"
`;

exports[`Comparator Interface Cases > interface with intersection types 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,13 +1,27 @@
export interface EnhancedUser {
-  user: BaseUser & UserPermissions;
+  isAdmin: boolean;
+
+  user: BaseUser & UserPermissions & UserMetadata;
}

export interface BaseUser {
+  email: string;
+
  id: number;
+
  name: string;
}

export interface UserPermissions {
-  canEdit: boolean;
+  canCreate: boolean;
+
  canDelete: boolean;
+
+  canEdit: boolean;
}
+
+export interface UserMetadata {
+  lastLogin: Date;
+
+  loginCount: number;
+}"
`;

exports[`Comparator Interface Cases > inverse array intersection types 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,13 +1,13 @@
export interface Combined {
-  data: (A | B)[];
+  data: A;
}

export interface A {
  propA: string;
-  extraA: boolean;
}

export interface B {
  propB: number;
+
  extraB: Date;
}"
`;

exports[`Comparator Interface Cases > inverse union type with interface 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,8 +1,9 @@
export interface Container {
-  data: DataType | null;
+  data: string | null;
}

export interface DataType {
  value: string;
+
  id: number;
}"
`;

exports[`Comparator Interface Cases > map intersection type with mismatch 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,7 +1,7 @@
export interface Config {
-  map: ObservableMap<15, Popup<string>> & ObservableMap<string, Popup>;
+  map: ObservableMap<string, Popup<string>> & ObservableMap<string, Popup>;
}

export interface Popup<T extends (number | string) = number> {
  id: T;"
`;

exports[`Comparator Interface Cases > mismatching ObservableMap 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,5 +1,5 @@
import { ObservableMap } from 'mobx';

export interface Container {
-  data: ObservableMap<string, number>;
+  data: ObservableMap<string, boolean>;
}"
`;

exports[`Comparator Interface Cases > missing interface multiple times 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,3 +1,19 @@
export interface AppData {
  appInfo: string;
+
+  associationData: AssociationData;
}
+
+export interface AssociationData {
+  rgDevelopers: RgDevelopers[];
+
+  rgFranchises: RgDevelopers[];
+
+  rgPublishers: RgDevelopers[];
+}
+
+export interface RgDevelopers {
+  id: number;
+
+  name: string;
+}"
`;

exports[`Comparator Interface Cases > mixed missing tuple types 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,3 +1,3 @@
export interface CoordinateSystem {
-  point: [number, number];
+  point: (number | string)[];
}"
`;

exports[`Comparator Interface Cases > nested interface in union type 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,12 +1,17 @@
export interface Container {
  data: Base | Extended;
}

export interface Base {
+  created: Date;
+
  id: number;
+
  name: string;
}

export interface Extended {
+  active: boolean;
+
  details: string;
}"
`;

exports[`Comparator Interface Cases > recursive interface 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,4 +1,7 @@
export interface Node {
-  value: string;
  children: Node[];
+
+  parent: Node | null;
+
+  value: string;
}"
`;

exports[`Comparator Interface Cases > template literal types with missing type 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,5 +1,7 @@
export interface RouteConfig {
-  method: 'GET' | 'POST';
+  method: number;
+
  path: string;
+
  type: 4 | 5;
}"
`;

exports[`Comparator Interface Cases > union type with different lengths 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,3 +1,3 @@
export interface Container {
-  data: string | number;
+  data: string | number | boolean;
}"
`;

exports[`Comparator Interface Cases > union type with interface 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,3 +1,9 @@
export interface Container {
-  data: string | null;
+  data: DataType | null;
}
+
+export interface DataType {
+  id: number;
+
+  value: string;
+}"
`;

exports[`Comparator Interface Cases > union type with interface and different lengths 1`] = `
"===================================================================
--- a/target.ts
+++ b/target.ts
@@ -1,13 +1,21 @@
export interface Container {
-  data: A | B;
+  data: A | B | C;
}

export interface A {
  propA: string;
}

export interface B {
-  propB: number;
+  extraB: Date;
+
  fooB: string;
+
  otherB: boolean;
+
+  propB: number;
}
+
+export interface C {
+  propC: boolean;
+}"
`;
